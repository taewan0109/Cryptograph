#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <stdbool.h>
#include <time.h>

#define MIN 100
#define MAX 200
#define LEN 10 //이 인원 이상이 모이면 복원가능
#define DIST 20 //이 인원수에게 정보를 분배
#define PNUM 20 //생성하는 점의 범위 (0에서의 절댓값)

typedef long long DATA;
typedef long double RDATA;
typedef long double Poly[LEN];
typedef struct {
    long long x;
    long double y;
} POINT;

void makePoly(Poly, DATA, DATA);
void printPoly(Poly);
DATA makePrime(void);
RDATA calcPoly(Poly, DATA);
void makePoint(Poly, POINT*);
void makeLagPoly(Poly, POINT*);
void makeLagBasis(Poly, POINT*, int);
void addPoly(Poly, Poly, Poly); //add P, Q and save to R
void multPoly(Poly, Poly, Poly);
void multScalar(Poly, RDATA);
void dividScalar(Poly, DATA);
void copyPoly(Poly, Poly);
bool isPrime(DATA);

int main(void)
{
    DATA prime;
    POINT Point[DIST], Po[LEN];
    Poly P, L = { 0, };

    printf("Program Start...\n\n");
    srand((unsigned int)time(NULL));
    prime = makePrime();
    printf("prime number: %lld\n\n", prime);

    makePoly(P, 12, prime);
    printf("Polynomial: ");
    printPoly(P);
    printf("\n");
    makePoint(P, Point);

    printf("test point creat start\n");
    for (int i = 0; i < LEN; i++)
        Po[i] = Point[i];
    printf("test point creat end\n");
    
    makeLagPoly(L, Po);

    printf("\n\nLagrange Poly: ");
    printPoly(L);
    printf("Original Poly: ");
    printPoly(P);

    return 0;
}

void makePoly(Poly P, DATA num, DATA p)
{
    DATA* Z = (DATA*)calloc(p, sizeof(DATA));
    int i;
    if (Z == NULL)
    {
        printf("memory allocation error");
        exit(0);
    }

    for (i = 0; i < (p + 1) / 2; i++)
        Z[i] = -(p - 1) / 2 + (DATA)i;
    for (i = 0; i < (p - 1) / 2; i++)
        Z[i + (p + 1) / 2] = (DATA)i + (DATA)1;

    for (i = 1; i < LEN; i++)
        P[i] = (RDATA)Z[rand() % p];
    P[0] = (RDATA)num;
    free(Z);
}

bool isPrime(DATA num)
{
    for (DATA i = 2; i <= sqrt((RDATA)num); i++)
        if (num % i == 0)
            return false;
    return true;
}

DATA makePrime(void)
{
    DATA i, len = 0;
    DATA primeArr[(MAX - MIN) / 2];

    for (i = MIN; i < MAX; i++)
        if (isPrime(i))
        {
            primeArr[len] = i;
            len++;
        }

    return primeArr[rand() % len];
}

RDATA calcPoly(Poly P, DATA n)
{
    RDATA sum = 0;
    for (int i = 0; i < LEN; i++)
        sum += P[i] * pow((double)n, (double)i);
    return sum;
}

void makePoint(Poly P, POINT* point)
{
    int num[DIST], i, j;
    bool b;
    for (i = 0; i < DIST; i++)
    {
        while (true)
        {
            b = true;
            //num = rand() - (int)(RAND_MAX / 2);
            num[i] = (rand() % (PNUM * 2)) - PNUM;
            //num[i] = i+ 1;

            for (j = 0; j < i; j++)
                if (num[i] == num[j])   b = false;
            if (b == false) continue;

            point[i].x = num[i];
            point[i].y = calcPoly(P, num[i]);
            printf("point (%lld , %.1f)\n", point[i].x, point[i].y);
            break;
        }
    }
    printf("\n");
}

void makeLagPoly(Poly L, POINT* point)
{
    Poly temp = { 0, }, l = { 0, }, p = { 0, };

    for (int i = 0; i < LEN; i++)
    {
        makeLagBasis(l, point, i);
        multScalar(l, point[i].y);
        ////printf("product Y: %f\n", point[i].y);
        ////printPoly(l);
        addPoly(l, temp, L);
        copyPoly(temp, L);
        //printPoly(L);
    }
    for (int i = 0; i < LEN; i++)
    {
        printf("%.3f, ", L[i]);
        L[i] = roundl(L[i]*10)/10;
        printf("%.3f\n", L[i]);
    }
}

void makeLagBasis(Poly l, POINT* point, int n)
{
    Poly temp = { 0, }, sum = { 0, };

    sum[0] = 1;
    ////printf("\n=========================================\nLagrange Basis Calculate!");
    for (int i = 0; i < LEN; i++)
        if (i != n)
        {
            ////printf("\nn: %d, i: %d\n", n, i);
            ////printf("err: %lld - %lld\n", point[n].x, point[i].x);
            temp[0] = (RDATA)-point[i].x;
            temp[1] = (RDATA)1;
            //printPoly(temp);
            //printPoly(sum);
            multPoly(temp, sum, l);
            //printPoly(l);//
            dividScalar(l, point[n].x - point[i].x);
            ////printf("cal: ");
            ////printPoly(l);
            copyPoly(sum, l);
        }
    ////printf("\nlagPoly: ");
    ////printPoly(l);
}

void addPoly(Poly P, Poly Q, Poly R)
{
    for (int i = 0; i < LEN; i++)
        R[i] = P[i] + Q[i];
}

void multPoly(Poly P, Poly Q, Poly R)
{
    Poly tmp = { 0, };
    ////printf("mult polynomial: \n");
    ////printPoly(P);
    ////printPoly(Q);
    ////printPoly(R);
    for (int i = 0; i < LEN; i++)
        for (int j = 0; j < LEN; j++)
            if (i + j < LEN)    tmp[i + j] += P[i] * Q[j];
    ////printf("mult result: ");
    ////printPoly(tmp);
    copyPoly(R, tmp);
}

void multScalar(Poly P, RDATA n)
{
    for (int i = 0; i < LEN; i++)
    {
        ////printf("multScalar: (%d) %f * %f -> %f\n", i, n, P[i], P[i]*n);
        P[i] *= n;

    }
}

void dividScalar(Poly P, DATA n)
{
    int j;
    for (j = 0; j < LEN; j++)
    {
        ////printf("divide %f / %lld = %f\n", P[j], n, P[j] / n);
        P[j] /= (RDATA)n;
    }
}

void copyPoly(Poly P, Poly Q)
{
    for (int i = 0; i < LEN; i++)   P[i] = Q[i];
}

void printPoly(Poly P)
{
    RDATA p;
    p = P[LEN - 1];
    if (p = P[LEN - 1])
        if (p > 0)  printf(" %.3fx^%d", p, LEN - 1);
        else    printf(" - %.3fx^%d", -p, LEN - 1);
    else    printf(" 0");

    for (int i = LEN - 2; i > 0; i--)
        if (p = P[i])
            if (p < 0)
                if (p != -1)    printf(" - %.3fx^%d", -p, i);
                else    printf(" - x^%d", i);
            else
                if (p != 1) printf(" + %.3fx^%d", p, i);
                else   printf(" + x^%d", i);
        else    printf(" + 0");

    if (p = P[0])
        if (p < 0)
            if (p != -1)    printf(" - %.3f", -p);
            else    printf(" - 1");
        else
            if (p != 1) printf(" + %.3f", p);
            else    printf(" + 1");
    else    printf(" + 0");
    printf("\n");
}
